import os
import json
import logging
from typing import Dict, Any, List, Optional
from datetime import datetime
import anthropic
from dotenv import load_dotenv

from .trip_planner_interface import (
    TripPlannerProvider, 
    TripPlanRequest, 
    TripPlanResponse, 
    TripPlanMetadata,
    ProviderType, 
    TripPlanQuality
)

load_dotenv()

logger = logging.getLogger(__name__)

class AITripProvider(TripPlannerProvider):
    """AI-powered trip planning provider using Claude"""
    
    def __init__(self):
        self.client = anthropic.Anthropic(api_key=os.getenv("ANTHROPIC_API_KEY"))
        self._available = bool(os.getenv("ANTHROPIC_API_KEY"))
    
    def get_provider_type(self) -> ProviderType:
        return ProviderType.AI
    
    def get_quality_estimate(self) -> TripPlanQuality:
        return TripPlanQuality.EXCELLENT
    
    def is_available(self) -> bool:
        return self._available
    
    async def plan_trip(self, request: TripPlanRequest) -> TripPlanResponse:
        """Generate a comprehensive trip plan using AI"""
        
        try:
            # Create the AI prompt
            prompt = self._create_planning_prompt(request)
            
            # Call Claude
            response = await self._call_claude(prompt)
            
            # Parse the response
            itinerary = self._parse_ai_response(response)
            
            # Create metadata
            metadata = TripPlanMetadata(
                provider=ProviderType.AI,
                quality=TripPlanQuality.EXCELLENT,
                confidence_score=0.9,
                data_freshness="recent",
                last_updated=datetime.now().isoformat(),
                source_notes=[
                    "Generated by Claude AI",
                    "Includes comprehensive itinerary with activities, dining, and attractions",
                    "Booking links may need verification"
                ]
            )
            
            return TripPlanResponse(
                success=True,
                itinerary=itinerary,
                metadata=metadata,
                booking_links={
                    "flights": itinerary.get("booking_links", {}).get("flights", ""),
                    "hotels": itinerary.get("booking_links", {}).get("hotels", ""),
                    "activities": itinerary.get("booking_links", {}).get("activities", "")
                },
                estimated_costs=itinerary.get("estimated_costs", {})
            )
            
        except Exception as e:
            logger.error(f"AI trip planning failed: {str(e)}")
            return TripPlanResponse(
                success=False,
                itinerary={},
                metadata=TripPlanMetadata(
                    provider=ProviderType.AI,
                    quality=TripPlanQuality.UNKNOWN,
                    confidence_score=0.0,
                    data_freshness="unknown",
                    last_updated=datetime.now().isoformat(),
                    source_notes=[f"AI planning failed: {str(e)}"]
                ),
                booking_links={
                    "flights": "",
                    "hotels": "",
                    "activities": ""
                },
                estimated_costs={},
                error_message=f"AI trip planning failed: {str(e)}"
            )
    
    def _create_planning_prompt(self, request: TripPlanRequest) -> str:
        """Create a comprehensive prompt for AI trip planning"""
        
        interests_text = ", ".join(request.interests) if request.interests else "general exploration"
        
        prompt = f"""
You are an expert travel planner. Create a comprehensive {request.duration_days}-day trip plan from {request.origin} to {request.destination}.

**CRITICAL REQUIREMENTS:**
1. The destination is {request.destination}. Do NOT change this destination or suggest alternatives.
2. The trip starts on {request.start_date} and lasts exactly {request.duration_days} days.
3. Generate exactly {request.duration_days} days of itinerary (day_1, day_2, day_3, etc.).
4. Use the exact start date {request.start_date} for day_1, then calculate subsequent days correctly.

**Trip Details:**
- Origin: {request.origin}
- Destination: {request.destination} (DO NOT CHANGE THIS)
- Duration: {request.duration_days} days
- Start Date: {request.start_date} (USE THIS EXACT DATE FOR DAY 1)
- Travelers: {request.travelers} person(s)
- Budget: {request.budget_range}
- Trip Type: {request.trip_type}
- Interests: {interests_text}
- Special Requirements: {request.special_requirements or "None"}

**Requirements:**
1. Create a detailed day-by-day itinerary for {request.destination} specifically
2. Include specific attractions, restaurants, and activities in {request.destination}
3. Provide realistic time allocations for each activity
4. Include transportation options between locations in {request.destination}
5. Suggest accommodation options with price ranges in {request.destination}
6. Provide booking links where possible
7. Include estimated costs for each category
8. Add cultural tips and practical advice for {request.destination}

**Response Format (JSON):**
{{
    "trip_summary": {{
        "title": "Trip title",
        "overview": "Brief trip overview",
        "highlights": ["key highlights"],
        "best_time_to_visit": "When to visit",
        "weather_info": "Weather during trip dates",
        "start_date": "{request.start_date}",
        "end_date": "calculated based on start_date and {request.duration_days} days"
    }},
    "accommodation": {{
        "recommendations": [
            {{
                "name": "Hotel name",
                "type": "hotel/hostel/apartment",
                "price_range": "budget/moderate/luxury",
                "price_per_night": 150,
                "location": "neighborhood",
                "booking_link": "https://...",
                "pros": ["pros"],
                "cons": ["cons"]
            }}
        ],
        "total_cost": 1050
    }},
    "itinerary": {{
        "day_1": {{
            "date": "{request.start_date}",
            "theme": "arrival_exploration",
            "morning": {{
                "activity": "Activity name",
                "location": "Location",
                "duration": "2 hours",
                "cost": 25,
                "description": "Detailed description",
                "tips": ["practical tips"],
                "booking_link": "https://..."
            }},
            "lunch": {{
                "restaurant": "Restaurant name",
                "cuisine": "Cuisine type",
                "price_range": "budget/moderate/luxury",
                "cost": 30,
                "location": "Location",
                "description": "Why this restaurant",
                "reservation_link": "https://..."
            }},
            "afternoon": {{...}},
            "dinner": {{...}},
            "evening": {{...}}
        }},
        "day_2": {{
            "date": "next day after {request.start_date}",
            "theme": "cultural_exploration",
            "morning": {{...}},
            "lunch": {{...}},
            "afternoon": {{...}},
            "dinner": {{...}},
            "evening": {{...}}
        }},
        "day_3": {{...}},
        "day_4": {{...}},
        "day_5": {{...}}
        // Continue for all {request.duration_days} days
    }},
    "transportation": {{
        "arrival": {{
            "method": "flight/train/bus",
            "details": "Details",
            "cost": 200,
            "booking_link": "https://..."
        }},
        "local_transport": {{
            "recommendations": ["transport options"],
            "cost_per_day": 15
        }},
        "departure": {{...}}
    }},
    "estimated_costs": {{
        "accommodation": 1050,
        "transportation": 300,
        "activities": 400,
        "food": 600,
        "total": 2350
    }},
    "booking_links": {{
        "flights": "https://...",
        "hotels": "https://...",
        "activities": "https://..."
    }},
    "practical_info": {{
        "currency": "Local currency",
        "language": "Local language",
        "timezone": "Timezone",
        "emergency_numbers": ["numbers"],
        "cultural_tips": ["tips"],
        "packing_suggestions": ["items"]
    }}
}}

Make the plan realistic, detailed, and personalized to the traveler's interests and budget. Include specific names of places, realistic prices, and practical information.

**CRITICAL REQUIREMENTS:**
1. You must respond with ONLY valid JSON in the exact format specified above. Do not include any text before or after the JSON. Do not use markdown formatting.
2. Generate exactly {request.duration_days} days of itinerary starting from {request.start_date}.
3. Each day should have a unique theme and activities.
4. Use the exact start date {request.start_date} for day_1.
5. Calculate subsequent days correctly (day_2, day_3, etc.).
"""
        
        return prompt
    
    async def _call_claude(self, prompt: str) -> str:
        """Call Claude API with the planning prompt"""
        
        try:
            response = self.client.messages.create(
                model="claude-opus-4-1-20250805",
                max_tokens=4000,
                temperature=0.7,
                messages=[
                    {
                        "role": "user",
                        "content": prompt
                    }
                ]
            )
            
            return response.content[0].text
            
        except Exception as e:
            logger.error(f"Claude API call failed: {str(e)}")
            raise e
    
    def _parse_ai_response(self, response: str) -> Dict[str, Any]:
        """Parse the AI response into structured data"""
        
        try:
            # Try to extract JSON from the response
            # Look for JSON blocks in the response
            import re
            
            # Find JSON blocks
            json_pattern = r'```json\s*(.*?)\s*```'
            json_matches = re.findall(json_pattern, response, re.DOTALL)
            
            if json_matches:
                # Use the first JSON block
                json_str = json_matches[0]
            else:
                # Try to find JSON without markdown
                json_pattern = r'\{.*\}'
                json_matches = re.findall(json_pattern, response, re.DOTALL)
                if json_matches:
                    json_str = json_matches[0]
                else:
                    raise ValueError("No JSON found in response")
            
            # Parse the JSON
            itinerary = json.loads(json_str)
            
            # Ensure required fields exist
            if "itinerary" not in itinerary:
                itinerary["itinerary"] = {}
            
            if "estimated_costs" not in itinerary:
                itinerary["estimated_costs"] = {}
            
            if "booking_links" not in itinerary:
                itinerary["booking_links"] = {}
            
            return itinerary
            
        except Exception as e:
            logger.error(f"Failed to parse AI response: {str(e)}")
            # Return a basic structure if parsing fails
            return {
                "trip_summary": {
                    "title": "AI Generated Trip",
                    "overview": "Trip plan generated by AI",
                    "highlights": ["AI-generated highlights"],
                    "best_time_to_visit": "Varies",
                    "weather_info": "Check local weather"
                },
                "itinerary": {},
                "estimated_costs": {},
                "booking_links": {},
                "practical_info": {
                    "currency": "Local currency",
                    "language": "Local language",
                    "timezone": "Local timezone",
                    "emergency_numbers": [],
                    "cultural_tips": [],
                    "packing_suggestions": []
                }
            } 