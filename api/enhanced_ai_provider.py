import os
import json
import logging
from typing import Dict, Any, List, Optional
from datetime import datetime, timedelta
import anthropic
from dotenv import load_dotenv

from .trip_planner_interface import (
    TripPlannerProvider, 
    TripPlanRequest, 
    TripPlanResponse, 
    TripPlanMetadata,
    ProviderType, 
    TripPlanQuality
)
from .hotel_client import HotelClient
from .search_one_way import search_one_way_flights
from .models import HotelSearchRequest
from services.budget_allocation_service import BudgetAllocationService
from services.price_display_service import price_display_service

load_dotenv()

logger = logging.getLogger(__name__)

class EnhancedAITripProvider(TripPlannerProvider):
    """Enhanced AI-powered trip planning provider using Claude with real API integration"""
    
    def __init__(self):
        self.client = anthropic.Anthropic(api_key=os.getenv("ANTHROPIC_API_KEY"))
        self._available = bool(os.getenv("ANTHROPIC_API_KEY"))
        self.hotel_client = HotelClient()
        self.budget_service = BudgetAllocationService()
    
    def get_provider_type(self) -> ProviderType:
        return ProviderType.AI
    
    def get_quality_estimate(self) -> TripPlanQuality:
        return TripPlanQuality.EXCELLENT
    
    def is_available(self) -> bool:
        return self._available
    
    async def plan_trip(self, request: TripPlanRequest) -> TripPlanResponse:
        """Generate a comprehensive trip plan using AI with real API integration"""
        
        try:
            # Calculate budget allocation (30-35% for hotels)
            budget_allocation = self._calculate_budget_allocation(request)
            
            # Get real hotel data with budget constraints
            hotel_data = await self._get_hotel_recommendations(request, budget_allocation)
            
            # Get real flight data
            flight_data = await self._get_flight_recommendations(request)
            
            # Create enhanced AI prompt with real data and budget allocation
            prompt = self._create_enhanced_planning_prompt(request, hotel_data, flight_data, budget_allocation)
            
            # Call Claude
            response = await self._call_claude(prompt)
            
            # Parse the response
            itinerary = self._parse_ai_response(response)
            
            # Enhance with real booking links
            itinerary = self._enhance_with_real_booking_links(itinerary, hotel_data, flight_data, request)
            
            # Create metadata
            metadata = TripPlanMetadata(
                provider=ProviderType.AI,
                quality=TripPlanQuality.EXCELLENT,
                confidence_score=0.95,
                data_freshness="real_time",
                last_updated=datetime.now().isoformat(),
                source_notes=[
                    "Generated by Claude AI with real API integration",
                    "Includes real hotel availability and pricing",
                    "Flight recommendations based on actual search results",
                    "Booking links are personalized and functional"
                ]
            )
            
            return TripPlanResponse(
                success=True,
                itinerary=itinerary,
                metadata=metadata,
                booking_links=itinerary.get("booking_links", {}),
                estimated_costs=itinerary.get("estimated_costs", {})
            )
            
        except Exception as e:
            logger.error(f"Enhanced AI trip planning failed: {str(e)}")
            return TripPlanResponse(
                success=False,
                itinerary={},
                metadata=TripPlanMetadata(
                    provider=ProviderType.AI,
                    quality=TripPlanQuality.UNKNOWN,
                    confidence_score=0.0,
                    data_freshness="unknown",
                    last_updated=datetime.now().isoformat(),
                    source_notes=[f"Enhanced AI planning failed: {str(e)}"]
                ),
                booking_links={
                    "flights": "",
                    "hotels": "",
                    "activities": ""
                },
                estimated_costs={},
                error_message=f"Enhanced AI trip planning failed: {str(e)}"
            )
    
    async def _get_hotel_recommendations(self, request: TripPlanRequest, budget_allocation: Dict[str, Any] = None) -> Dict[str, Any]:
        """Get real hotel recommendations using the hotel API with budget allocation"""
        try:
            # Handle None start_date
            if not request.start_date:
                # Use a default date (next week)
                start_date = datetime.now() + timedelta(days=7)
                request.start_date = start_date.strftime("%Y-%m-%d")
            
            # Calculate check-in and check-out dates
            start_date = datetime.strptime(request.start_date, "%Y-%m-%d")
            end_date = start_date + timedelta(days=request.duration_days)
            
            # Create hotel search request
            hotel_request = HotelSearchRequest(
                location=request.destination,
                check_in=request.start_date,
                check_out=end_date.strftime("%Y-%m-%d"),
                adults=request.travelers,
                children=[],
                rooms=1,
                currency="USD"
            )
            
            # Use budget allocation for hotel search if available
            max_budget = None
            if budget_allocation and budget_allocation.get("hotel_budget_allocation"):
                hotel_budget = budget_allocation["hotel_budget_allocation"]
                per_night = float(hotel_budget["per_night"].replace("$", ""))
                max_budget = per_night * 1.2  # Allow 20% flexibility
            else:
                max_budget = self._get_budget_amount(request.budget_range)
            
            # Search for hotels
            hotel_response = self.hotel_client.smart_hotel_search(
                hotel_request, 
                max_budget=max_budget
            )
            
            if hotel_response.hotels and len(hotel_response.hotels) > 0:
                # Return top 6 hotels (more variety)
                top_hotels = hotel_response.hotels[:6]
                
                # Convert hotel prices to user's local currency (INR for India)
                hotels_with_prices = [
                    {
                        "name": hotel.hotel.name,
                        "rating": hotel.hotel.rating,
                        "price_per_night": hotel.average_price_per_night,
                        "location": f"{hotel.hotel.city}, {hotel.hotel.country}",
                        "amenities": hotel.hotel.amenities or [],
                        "booking_link": self.hotel_client.generate_hotel_booking_url(
                            hotel.hotel.hotel_id,
                            request.start_date,
                            end_date.strftime("%Y-%m-%d"),
                            request.travelers,
                            [],
                            1,
                            "USD"
                        ),
                        "hotel_id": hotel.hotel.hotel_id
                    }
                    for hotel in top_hotels
                ]
                
                # Convert prices to INR for display
                converted_hotels = await price_display_service.convert_hotel_prices(hotels_with_prices, "INR")
                
                return {
                    "success": True,
                    "hotels": converted_hotels
                }
            else:
                return {"success": False, "hotels": []}
                
        except Exception as e:
            logger.error(f"Hotel search failed: {str(e)}")
            return {"success": False, "hotels": []}
    
    async def _get_flight_recommendations(self, request: TripPlanRequest) -> Dict[str, Any]:
        """Get real flight recommendations using the flight API"""
        try:
            # Handle None start_date
            if not request.start_date:
                # Use a default date (next week)
                start_date = datetime.now() + timedelta(days=7)
                request.start_date = start_date.strftime("%Y-%m-%d")
            
            # Calculate return date (for round trip)
            start_date = datetime.strptime(request.start_date, "%Y-%m-%d")
            return_date = start_date + timedelta(days=request.duration_days)
            
            # Use aiohttp to call the flight API directly
            import aiohttp
            import json
            
            # Prepare search parameters
            search_params = {
                "origin": request.origin,
                "destination": request.destination,
                "date": request.start_date,
                "return_date": return_date.strftime("%Y-%m-%d")
            }
            
            logger.info(f"Calling flight API with params: {search_params}")
            
            # Make request to the flight search endpoint
            async with aiohttp.ClientSession() as session:
                async with session.post(
                    "http://localhost:8000/api/search",
                    json=search_params
                ) as response:
                    logger.info(f"Flight API response status: {response.status}")
                    
                    if response.status == 200:
                        result = await response.json()
                        logger.info(f"Flight API response: {result}")
                        
                        if result.get("success") and result.get("flights"):
                            logger.info(f"Found {len(result['flights'])} flights")
                            
                            # Convert flight prices to user's local currency (INR for India)
                            converted_flights = await price_display_service.convert_flight_prices(result["flights"], "INR")
                            
                            return {
                                "success": True,
                                "flights": converted_flights,
                                "categorized_flights": result.get("categorized_flights", {})
                            }
                        else:
                            logger.error(f"No flights found in response: {result}")
                            return {"success": False, "flights": []}
                    else:
                        error_text = await response.text()
                        logger.error(f"Flight API error: {error_text}")
                        return {"success": False, "flights": []}
                
        except Exception as e:
            logger.error(f"Flight search failed: {str(e)}")
            import traceback
            logger.error(f"Traceback: {traceback.format_exc()}")
            return {"success": False, "flights": []}
    
    def _get_budget_amount(self, budget_range: str) -> Optional[float]:
        """Convert budget range to dollar amount"""
        budget_map = {
            "budget": 100,
            "moderate": 300,
            "luxury": 500
        }
        return budget_map.get(budget_range, 300)
    
    def _calculate_budget_allocation(self, request: TripPlanRequest) -> Dict[str, Any]:
        """Calculate budget allocation with 30-35% for hotels"""
        try:
            # Get total budget
            total_budget = self._get_budget_amount(request.budget_range)
            if not total_budget:
                total_budget = 300  # Default moderate budget
            
            # Calculate duration
            start_date = datetime.strptime(request.start_date, "%Y-%m-%d")
            end_date = datetime.strptime(request.end_date, "%Y-%m-%d")
            duration = (end_date - start_date).days
            
            # Calculate budget allocation
            allocation = self.budget_service.calculate_budget_allocation(
                total_budget=total_budget,
                trip_duration=duration,
                travelers=request.travelers
            )
            
            return allocation
            
        except Exception as e:
            logger.error(f"Error calculating budget allocation: {e}")
            return None
    
    def _create_enhanced_planning_prompt(self, request: TripPlanRequest, 
                                       hotel_data: Dict[str, Any], 
                                       flight_data: Dict[str, Any],
                                       budget_allocation: Dict[str, Any] = None) -> str:
        """Create an enhanced prompt with real API data"""
        
        interests_text = ", ".join(request.interests) if request.interests else "general exploration"
        
        # Format hotel data for the prompt
        hotel_info = ""
        if hotel_data.get("success") and hotel_data.get("hotels"):
            hotel_info = "\n**Real Hotel Options Available:**\n"
            hotel_info += "**Budget Hotels (Under $100/night):**\n"
            budget_hotels = [h for h in hotel_data["hotels"] if h.get('price_per_night', 0) < 100]
            for i, hotel in enumerate(budget_hotels[:3], 1):
                hotel_info += f"{i}. {hotel['name']} - ${hotel['price_per_night']}/night, {hotel.get('rating', 'N/A')}★\n"
                hotel_info += f"   Location: {hotel['location']}\n"
                hotel_info += f"   Amenities: {', '.join(hotel.get('amenities', [])[:3])}\n\n"
            
            hotel_info += "**Moderate Hotels ($100-$400/night):**\n"
            moderate_hotels = [h for h in hotel_data["hotels"] if 100 <= h.get('price_per_night', 0) < 400]
            for i, hotel in enumerate(moderate_hotels[:3], 1):
                hotel_info += f"{i}. {hotel['name']} - ${hotel['price_per_night']}/night, {hotel.get('rating', 'N/A')}★\n"
                hotel_info += f"   Location: {hotel['location']}\n"
                hotel_info += f"   Amenities: {', '.join(hotel.get('amenities', [])[:3])}\n\n"
            
            hotel_info += "**Luxury Hotels (Above $500/night):**\n"
            luxury_hotels = [h for h in hotel_data["hotels"] if h.get('price_per_night', 0) >= 500]
            for i, hotel in enumerate(luxury_hotels[:3], 1):
                hotel_info += f"{i}. {hotel['name']} - ${hotel['price_per_night']}/night, {hotel.get('rating', 'N/A')}★\n"
                hotel_info += f"   Location: {hotel['location']}\n"
                hotel_info += f"   Amenities: {', '.join(hotel.get('amenities', [])[:3])}\n\n"
        
        # Format flight data for the prompt
        flight_info = ""
        if flight_data.get("success") and flight_data.get("flights"):
            flight_info = "\n**Real Flight Options Available:**\n"
            flight_info += "**Fastest Flights:**\n"
            # Sort by duration (integer in seconds)
            fastest_flights = sorted(flight_data["flights"], key=lambda x: x.get('duration', 0))[:3]
            for i, flight in enumerate(fastest_flights, 1):
                # Format duration from seconds to readable format
                duration_seconds = flight.get('duration', 0)
                duration_str = f"{duration_seconds // 3600}h{(duration_seconds % 3600) // 60}m" if isinstance(duration_seconds, int) else str(duration_seconds)
                # Get price value
                price = flight.get('price', {})
                price_value = price.get('units', 0) if isinstance(price, dict) else price
                
                flight_info += f"{i}. {flight['airline']} - ${price_value}\n"
                flight_info += f"   Departure: {flight['departure_time']} | Arrival: {flight['arrival_time']}\n"
                flight_info += f"   Duration: {duration_str} | Stops: {flight.get('stops', 0)}\n\n"
            
            flight_info += "**Cheapest Flights:**\n"
            # Sort by price (handle both dict and simple values)
            cheapest_flights = sorted(flight_data["flights"], key=lambda x: x.get('price', {}).get('units', 0) if isinstance(x.get('price'), dict) else x.get('price', 0))[:3]
            for i, flight in enumerate(cheapest_flights, 1):
                # Format duration from seconds to readable format
                duration_seconds = flight.get('duration', 0)
                duration_str = f"{duration_seconds // 3600}h{(duration_seconds % 3600) // 60}m" if isinstance(duration_seconds, int) else str(duration_seconds)
                # Get price value
                price = flight.get('price', {})
                price_value = price.get('units', 0) if isinstance(price, dict) else price
                
                flight_info += f"{i}. {flight['airline']} - ${price_value}\n"
                flight_info += f"   Departure: {flight['departure_time']} | Arrival: {flight['arrival_time']}\n"
                flight_info += f"   Duration: {duration_str} | Stops: {flight.get('stops', 0)}\n\n"
            
            flight_info += "**Optimal Flights (Best Value):**\n"
            # Sort by combination of price and duration
            optimal_flights = sorted(flight_data["flights"], key=lambda x: (x.get('price', {}).get('units', 0) if isinstance(x.get('price'), dict) else x.get('price', 0)) + x.get('duration', 0))[:3]
            for i, flight in enumerate(optimal_flights, 1):
                # Format duration from seconds to readable format
                duration_seconds = flight.get('duration', 0)
                duration_str = f"{duration_seconds // 3600}h{(duration_seconds % 3600) // 60}m" if isinstance(duration_seconds, int) else str(duration_seconds)
                # Get price value
                price = flight.get('price', {})
                price_value = price.get('units', 0) if isinstance(price, dict) else price
                
                flight_info += f"{i}. {flight['airline']} - ${price_value}\n"
                flight_info += f"   Departure: {flight['departure_time']} | Arrival: {flight['arrival_time']}\n"
                flight_info += f"   Duration: {duration_str} | Stops: {flight.get('stops', 0)}\n\n"
        
        prompt = f"""
You are an expert travel planner. Create a comprehensive {request.duration_days}-day trip plan from {request.origin} to {request.destination}.

**CRITICAL REQUIREMENTS:**
1. The destination is {request.destination}. Do NOT change this destination or suggest alternatives.
2. The trip starts on {request.start_date} and lasts exactly {request.duration_days} days.
3. Generate exactly {request.duration_days} days of itinerary (day_1, day_2, day_3, etc.).
4. Use the exact start date {request.start_date} for day_1, then calculate subsequent days correctly.
5. Include SPECIFIC flight and hotel recommendations with real booking links.

**Trip Details:**
- Origin: {request.origin}
- Destination: {request.destination} (DO NOT CHANGE THIS)
- Duration: {request.duration_days} days
- Start Date: {request.start_date} (USE THIS EXACT DATE FOR DAY 1)
- Travelers: {request.travelers} person(s)
- Budget: {request.budget_range}
- Trip Type: {request.trip_type}
- Interests: {interests_text}
- Special Requirements: {request.special_requirements or "None"}

**Smart Budget Allocation (30-35% for Hotels):**
- Total Budget: {budget_allocation.get('total_estimated_cost', 'N/A') if budget_allocation else 'N/A'}
- Hotel Budget: {budget_allocation.get('budget_breakdown', {}).get('accommodation', 'N/A') if budget_allocation else 'N/A'} ({budget_allocation.get('budget_percentages', {}).get('accommodation', 'N/A') if budget_allocation else 'N/A'})
- Flight Budget: {budget_allocation.get('budget_breakdown', {}).get('flights', 'N/A') if budget_allocation else 'N/A'} ({budget_allocation.get('budget_percentages', {}).get('flights', 'N/A') if budget_allocation else 'N/A'})
- Meal Budget: {budget_allocation.get('budget_breakdown', {}).get('meals', 'N/A') if budget_allocation else 'N/A'} ({budget_allocation.get('budget_percentages', {}).get('meals', 'N/A') if budget_allocation else 'N/A'})
- Activity Budget: {budget_allocation.get('budget_breakdown', {}).get('activities', 'N/A') if budget_allocation else 'N/A'} ({budget_allocation.get('budget_percentages', {}).get('activities', 'N/A') if budget_allocation else 'N/A'})
- Hotel Recommendation: {budget_allocation.get('hotel_budget_allocation', {}).get('recommendation', 'N/A') if budget_allocation else 'N/A'}

{hotel_info}
{flight_info}

**Requirements:**
1. Create a detailed day-by-day itinerary for {request.destination} specifically
2. Include specific attractions, restaurants, and activities in {request.destination}
3. Provide realistic time allocations for each activity
4. Include transportation options between locations in {request.destination}
5. Include SPECIFIC flight recommendations with airline names, prices, and booking links
6. Include SPECIFIC hotel recommendations with names, prices, and booking links
7. Generate REAL booking URLs for flights (e.g., https://booking.com/flights/{request.origin}-{request.destination})
8. Generate REAL booking URLs for hotels (e.g., https://booking.com/hotel/...)
9. Include estimated costs for each category
10. Add cultural tips and practical advice for {request.destination}

**Response Format (JSON):**
{{
    "trip_summary": {{
        "title": "Trip title",
        "overview": "Brief trip overview",
        "highlights": ["key highlights"],
        "best_time_to_visit": "When to visit",
        "weather_info": "Weather during trip dates",
        "start_date": "{request.start_date}",
        "end_date": "calculated based on start_date and {request.duration_days} days"
    }},
    "transportation": {{
        "fastest": [
            {{
                "airline": "Specific airline name",
                "flight_number": "Specific flight number",
                "departure_time": "HH:MM",
                "arrival_time": "HH:MM",
                "duration": "XhYm",
                "cost": 0,
                "booking_link": "https://booking.com/flights/{{origin}}-{{destination}}"
            }},
            {{
                "airline": "Specific airline name",
                "flight_number": "Specific flight number",
                "departure_time": "HH:MM",
                "arrival_time": "HH:MM",
                "duration": "XhYm",
                "cost": 0,
                "booking_link": "https://booking.com/flights/{{origin}}-{{destination}}"
            }},
            {{
                "airline": "Specific airline name",
                "flight_number": "Specific flight number",
                "departure_time": "HH:MM",
                "arrival_time": "HH:MM",
                "duration": "XhYm",
                "cost": 0,
                "booking_link": "https://booking.com/flights/{{origin}}-{{destination}}"
            }}
        ],
        "cheapest": [
            {{
                "airline": "Specific airline name",
                "flight_number": "Specific flight number",
                "departure_time": "HH:MM",
                "arrival_time": "HH:MM",
                "duration": "XhYm",
                "cost": 0,
                "booking_link": "https://booking.com/flights/{{origin}}-{{destination}}"
            }},
            {{
                "airline": "Specific airline name",
                "flight_number": "Specific flight number",
                "departure_time": "HH:MM",
                "arrival_time": "HH:MM",
                "duration": "XhYm",
                "cost": 0,
                "booking_link": "https://booking.com/flights/{{origin}}-{{destination}}"
            }},
            {{
                "airline": "Specific airline name",
                "flight_number": "Specific flight number",
                "departure_time": "HH:MM",
                "arrival_time": "HH:MM",
                "duration": "XhYm",
                "cost": 0,
                "booking_link": "https://booking.com/flights/{{origin}}-{{destination}}"
            }}
        ],
        "optimal": [
            {{
                "airline": "Specific airline name",
                "flight_number": "Specific flight number",
                "departure_time": "HH:MM",
                "arrival_time": "HH:MM",
                "duration": "XhYm",
                "cost": 0,
                "booking_link": "https://booking.com/flights/{{origin}}-{{destination}}"
            }},
            {{
                "airline": "Specific airline name",
                "flight_number": "Specific flight number",
                "departure_time": "HH:MM",
                "arrival_time": "HH:MM",
                "duration": "XhYm",
                "cost": 0,
                "booking_link": "https://booking.com/flights/{{origin}}-{{destination}}"
            }},
            {{
                "airline": "Specific airline name",
                "flight_number": "Specific flight number",
                "departure_time": "HH:MM",
                "arrival_time": "HH:MM",
                "duration": "XhYm",
                "cost": 0,
                "booking_link": "https://booking.com/flights/{{origin}}-{{destination}}"
            }}
        ]
    }},
    "accommodation": {{
        "budget": [
            {{
                "name": "Specific hotel name",
                "type": "hotel",
                "price_per_night": 0,
                "location": "Specific location",
                "booking_link": "https://www.booking.com/hotel/{{hotel_id}}.html?checkin={{start_date}}&checkout={{end_date}}&adults={{travelers}}&rooms=1&currency=USD",
                "pros": ["Pro 1", "Pro 2"],
                "cons": ["Con 1", "Con 2"]
            }},
            {{
                "name": "Specific hotel name",
                "type": "hotel",
                "price_per_night": 0,
                "location": "Specific location",
                "booking_link": "https://www.booking.com/hotel/{{hotel_id}}.html?checkin={{start_date}}&checkout={{end_date}}&adults={{travelers}}&rooms=1&currency=USD",
                "pros": ["Pro 1", "Pro 2"],
                "cons": ["Con 1", "Con 2"]
            }},
            {{
                "name": "Specific hotel name",
                "type": "hotel",
                "price_per_night": 0,
                "location": "Specific location",
                "booking_link": "https://www.booking.com/hotel/{{hotel_id}}.html?checkin={{start_date}}&checkout={{end_date}}&adults={{travelers}}&rooms=1&currency=USD",
                "pros": ["Pro 1", "Pro 2"],
                "cons": ["Con 1", "Con 2"]
            }}
        ],
        "moderate": [
            {{
                "name": "Specific hotel name",
                "type": "hotel",
                "price_per_night": 0,
                "location": "Specific location",
                "booking_link": "https://www.booking.com/hotel/{{hotel_id}}.html?checkin={{start_date}}&checkout={{end_date}}&adults={{travelers}}&rooms=1&currency=USD",
                "pros": ["Pro 1", "Pro 2"],
                "cons": ["Con 1", "Con 2"]
            }},
            {{
                "name": "Specific hotel name",
                "type": "hotel",
                "price_per_night": 0,
                "location": "Specific location",
                "booking_link": "https://www.booking.com/hotel/{{hotel_id}}.html?checkin={{start_date}}&checkout={{end_date}}&adults={{travelers}}&rooms=1&currency=USD",
                "pros": ["Pro 1", "Pro 2"],
                "cons": ["Con 1", "Con 2"]
            }},
            {{
                "name": "Specific hotel name",
                "type": "hotel",
                "price_per_night": 0,
                "location": "Specific location",
                "booking_link": "https://www.booking.com/hotel/{{hotel_id}}.html?checkin={{start_date}}&checkout={{end_date}}&adults={{travelers}}&rooms=1&currency=USD",
                "pros": ["Pro 1", "Pro 2"],
                "cons": ["Con 1", "Con 2"]
            }}
        ],
        "luxury": [
            {{
                "name": "Specific hotel name",
                "type": "hotel",
                "price_per_night": 0,
                "location": "Specific location",
                "booking_link": "https://www.booking.com/hotel/{{hotel_id}}.html?checkin={{start_date}}&checkout={{end_date}}&adults={{travelers}}&rooms=1&currency=USD",
                "pros": ["Pro 1", "Pro 2"],
                "cons": ["Con 1", "Con 2"]
            }},
            {{
                "name": "Specific hotel name",
                "type": "hotel",
                "price_per_night": 0,
                "location": "Specific location",
                "booking_link": "https://www.booking.com/hotel/{{hotel_id}}.html?checkin={{start_date}}&checkout={{end_date}}&adults={{travelers}}&rooms=1&currency=USD",
                "pros": ["Pro 1", "Pro 2"],
                "cons": ["Con 1", "Con 2"]
            }},
            {{
                "name": "Specific hotel name",
                "type": "hotel",
                "price_per_night": 0,
                "location": "Specific location",
                "booking_link": "https://www.booking.com/hotel/{{hotel_id}}.html?checkin={{start_date}}&checkout={{end_date}}&adults={{travelers}}&rooms=1&currency=USD",
                "pros": ["Pro 1", "Pro 2"],
                "cons": ["Con 1", "Con 2"]
            }}
        ]
    }},
    "itinerary": {{
        "day_1": {{
            "date": "{request.start_date}",
            "theme": "arrival_exploration",
            "morning": {{
                "activity": "Activity name",
                "location": "Location",
                "duration": "2 hours",
                "cost": 25,
                "description": "Detailed description",
                "tips": ["practical tips"],
                "booking_link": "https://..."
            }},
            "lunch": {{
                "restaurant": "Restaurant name",
                "cuisine": "Cuisine type",
                "price_range": "budget/moderate/luxury",
                "cost": 30,
                "location": "Location",
                "description": "Why this restaurant",
                "reservation_link": "https://..."
            }},
            "afternoon": {{...}},
            "dinner": {{...}},
            "evening": {{...}}
        }},
        "day_2": {{
            "date": "next day after {request.start_date}",
            "theme": "cultural_exploration",
            "morning": {{...}},
            "lunch": {{...}},
            "afternoon": {{...}},
            "dinner": {{...}},
            "evening": {{...}}
        }},
        "day_3": {{...}},
        "day_4": {{...}},
        "day_5": {{...}}
        // Continue for all {request.duration_days} days
    }},
    "transportation": {{
        "arrival": {{
            "method": "flight",
            "airline": "Specific airline name",
            "flight_number": "AA123",
            "departure_time": "10:00 AM",
            "arrival_time": "2:00 PM",
            "duration": "4 hours",
            "cost": 200,
            "booking_link": "https://booking.com/flights/{request.origin}-{request.destination}"
        }},
        "local_transport": {{
            "recommendations": ["transport options"],
            "cost_per_day": 15
        }},
        "departure": {{
            "method": "flight",
            "airline": "Specific airline name",
            "flight_number": "AA124",
            "departure_time": "6:00 PM",
            "arrival_time": "10:00 PM",
            "duration": "4 hours",
            "cost": 200,
            "booking_link": "https://booking.com/flights/{request.destination}-{request.origin}"
        }}
    }},
    "estimated_costs": {{
        "accommodation": 1050,
        "transportation": 300,
        "activities": 400,
        "food": 600,
        "total": 2350
    }},
    "booking_links": {{
        "flights": "https://...",
        "hotels": "https://...",
        "activities": "https://..."
    }},
    "practical_info": {{
        "currency": "Local currency",
        "language": "Local language",
        "timezone": "Timezone",
        "emergency_numbers": ["numbers"],
        "cultural_tips": ["tips"],
        "packing_suggestions": ["items"]
    }}
}}

Make the plan realistic, detailed, and personalized to the traveler's interests and budget. Include specific names of places, realistic prices, and practical information.

**CRITICAL REQUIREMENTS:**
1. You must respond with ONLY valid JSON in the exact format specified above. Do not include any text before or after the JSON. Do not use markdown formatting.
2. Generate exactly {request.duration_days} days of itinerary starting from {request.start_date}.
3. Each day should have a unique theme and activities.
4. Use the exact start date {request.start_date} for day_1.
5. Calculate subsequent days correctly (day_2, day_3, etc.).
6. Use the REAL hotel and flight data provided above in your recommendations.
7. **MANDATORY**: Generate EXACTLY 3 different flight options for each category (fastest, cheapest, optimal) = 9 total flight options.
8. **MANDATORY**: Generate EXACTLY 3 different hotel options for each category (budget, moderate, luxury) = 9 total hotel options.
9. **MANDATORY**: Use the real hotel data from the API to populate the hotel categories properly.
10. **MANDATORY**: Use the real flight data from the API to populate the flight categories properly.
11. **MANDATORY**: Do not repeat the same option multiple times - each option must be unique.
"""
        
        return prompt
    
    async def _call_claude(self, prompt: str) -> str:
        """Call Claude API with the planning prompt"""
        
        try:
            response = self.client.messages.create(
                model="claude-3-5-sonnet-20241022",
                max_tokens=4000,
                temperature=0.7,
                messages=[
                    {
                        "role": "user",
                        "content": prompt
                    }
                ]
            )
            
            return response.content[0].text
            
        except Exception as e:
            logger.error(f"Claude API call failed: {str(e)}")
            raise e
    
    def _parse_ai_response(self, response: str) -> Dict[str, Any]:
        """Parse the AI response into structured data"""
        
        try:
            # Try to extract JSON from the response
            import re
            
            # Find JSON blocks
            json_pattern = r'```json\s*(.*?)\s*```'
            json_matches = re.findall(json_pattern, response, re.DOTALL)
            
            if json_matches:
                # Use the first JSON block
                json_str = json_matches[0]
            else:
                # Try to find JSON without markdown
                json_pattern = r'\{.*\}'
                json_matches = re.findall(json_pattern, response, re.DOTALL)
                if json_matches:
                    json_str = json_matches[0]
                else:
                    raise ValueError("No JSON found in response")
            
            # Parse the JSON
            itinerary = json.loads(json_str)
            
            # Ensure required fields exist
            if "itinerary" not in itinerary:
                itinerary["itinerary"] = {}
            
            return itinerary
            
        except Exception as e:
            logger.error(f"Failed to parse AI response: {str(e)}")
            logger.error(f"Response: {response}")
            raise e
    
    def _enhance_with_real_booking_links(self, itinerary: Dict[str, Any], 
                                       hotel_data: Dict[str, Any], 
                                       flight_data: Dict[str, Any],
                                       request: TripPlanRequest) -> Dict[str, Any]:
        """Enhance the AI-generated itinerary with real booking links and data"""
        
        # Generate proper deep links for flights
        if flight_data.get("success") and flight_data.get("flights"):
            # Use categorized flights from API if available
            if flight_data.get("categorized_flights"):
                logger.info("Using pre-categorized flights from API")
                categorized_flights = flight_data["categorized_flights"]
                
                # Replace AI-generated flights with real API data
                logger.info("Replacing AI-generated flights with real API data...")
                
                # Completely replace the flights structure with categorized format
                itinerary["flights"] = {
                    "fastest": [],
                    "cheapest": [],
                    "optimal": []
                }
                
                # Update fastest flights
                for flight in categorized_flights.get("fastest", []):
                    flight_obj = {
                        "airline": flight.get("airline", "Unknown"),
                        "flight_number": flight.get("flight_number", "Unknown"),
                        "departure_time": flight.get("departure_time", ""),
                        "arrival_time": flight.get("arrival_time", ""),
                        "duration": f"{flight.get('duration', 0) // 3600}h{(flight.get('duration', 0) % 3600) // 60}m" if isinstance(flight.get('duration'), int) else flight.get('duration', ''),
                        "cost": flight.get("price", {}).get("units", 0) if isinstance(flight.get("price"), dict) else flight.get("price", 0),
                        "booking_link": flight.get("booking_link", "")
                    }
                    itinerary["flights"]["fastest"].append(flight_obj)
                
                # Update cheapest flights
                for flight in categorized_flights.get("cheapest", []):
                    flight_obj = {
                        "airline": flight.get("airline", "Unknown"),
                        "flight_number": flight.get("flight_number", "Unknown"),
                        "departure_time": flight.get("departure_time", ""),
                        "arrival_time": flight.get("arrival_time", ""),
                        "duration": f"{flight.get('duration', 0) // 3600}h{(flight.get('duration', 0) % 3600) // 60}m" if isinstance(flight.get('duration'), int) else flight.get('duration', ''),
                        "cost": flight.get("price", {}).get("units", 0) if isinstance(flight.get("price"), dict) else flight.get("price", 0),
                        "booking_link": flight.get("booking_link", "")
                    }
                    itinerary["flights"]["cheapest"].append(flight_obj)
                
                # Update optimal flights
                for flight in categorized_flights.get("optimal", []):
                    flight_obj = {
                        "airline": flight.get("airline", "Unknown"),
                        "flight_number": flight.get("flight_number", "Unknown"),
                        "departure_time": flight.get("departure_time", ""),
                        "arrival_time": flight.get("arrival_time", ""),
                        "duration": f"{flight.get('duration', 0) // 3600}h{(flight.get('duration', 0) % 3600) // 60}m" if isinstance(flight.get('duration'), int) else flight.get('duration', ''),
                        "cost": flight.get("price", {}).get("units", 0) if isinstance(flight.get("price"), dict) else flight.get("price", 0),
                        "booking_link": flight.get("booking_link", "")
                    }
                    itinerary["flights"]["optimal"].append(flight_obj)
                
                logger.info(f"Replaced flights with {len(categorized_flights.get('fastest', []))} fastest, {len(categorized_flights.get('cheapest', []))} cheapest, {len(categorized_flights.get('optimal', []))} optimal flights")
            else:
                # Fallback to manual categorization
                logger.info("No pre-categorized flights, using manual categorization")
                all_flights = flight_data["flights"]
                if all_flights:
                    # Sort by duration for fastest
                    fastest_flights = sorted(all_flights, key=lambda x: x.get('duration', 0))[:3]
                    # Sort by price for cheapest
                    cheapest_flights = sorted(all_flights, key=lambda x: x.get('price', {}).get('units', 0) if isinstance(x.get('price'), dict) else x.get('price', 0))[:3]
                    # Sort by combination of price and duration for optimal
                    optimal_flights = sorted(all_flights, key=lambda x: (x.get('price', {}).get('units', 0) if isinstance(x.get('price'), dict) else x.get('price', 0) + x.get('duration', 0)))[:3]
                    
                    # Replace AI-generated flights with real API data
                    logger.info("Replacing AI-generated flights with real API data...")
                    
                    # Completely replace the flights structure with categorized format
                    itinerary["flights"] = {
                        "fastest": [],
                        "cheapest": [],
                        "optimal": []
                    }
                    
                    # Update fastest flights
                    for i, flight in enumerate(fastest_flights):
                        if i < 5:  # Ensure we only add 5 flights
                            flight_obj = {
                                "airline": flight.get("airline", "Unknown"),
                                "flight_number": flight.get("flight_number", "Unknown"),
                                "departure_time": flight.get("departure_time", ""),
                                "arrival_time": flight.get("arrival_time", ""),
                                "duration": f"{flight.get('duration', 0) // 3600}h{(flight.get('duration', 0) % 3600) // 60}m",
                                "cost": flight.get("price", {}).get("units", 0) if isinstance(flight.get("price"), dict) else flight.get("price", 0),
                                "booking_link": flight.get("booking_link", "")
                            }
                            itinerary["flights"]["fastest"].append(flight_obj)
                    
                    # Update cheapest flights
                    for i, flight in enumerate(cheapest_flights):
                        if i < 5:  # Ensure we only add 5 flights
                            flight_obj = {
                                "airline": flight.get("airline", "Unknown"),
                                "flight_number": flight.get("flight_number", "Unknown"),
                                "departure_time": flight.get("departure_time", ""),
                                "arrival_time": flight.get("arrival_time", ""),
                                "duration": f"{flight.get('duration', 0) // 3600}h{(flight.get('duration', 0) % 3600) // 60}m",
                                "cost": flight.get("price", {}).get("units", 0) if isinstance(flight.get("price"), dict) else flight.get("price", 0),
                                "booking_link": flight.get("booking_link", "")
                            }
                            itinerary["flights"]["cheapest"].append(flight_obj)
                    
                    # Update optimal flights
                    for i, flight in enumerate(optimal_flights):
                        if i < 5:  # Ensure we only add 5 flights
                            flight_obj = {
                                "airline": flight.get("airline", "Unknown"),
                                "flight_number": flight.get("flight_number", "Unknown"),
                                "departure_time": flight.get("departure_time", ""),
                                "arrival_time": flight.get("arrival_time", ""),
                                "duration": f"{flight.get('duration', 0) // 3600}h{(flight.get('duration', 0) % 3600) // 60}m",
                                "cost": flight.get("price", {}).get("units", 0) if isinstance(flight.get("price"), dict) else flight.get("price", 0),
                                "booking_link": flight.get("booking_link", "")
                            }
                            itinerary["flights"]["optimal"].append(flight_obj)
                    
                    logger.info(f"Replaced flights with {len(fastest_flights)} fastest, {len(cheapest_flights)} cheapest, {len(optimal_flights)} optimal flights")
                else:
                    logger.warning("No real flight data available, keeping AI-generated flights")
        else:
            logger.warning("Flight data not successful, keeping AI-generated flights")
        
        return itinerary
    
    def _generate_hotel_deep_link(self, hotel: Dict[str, Any], checkin_date: str, checkout_date: str, travelers: int) -> str:
        """Generate a proper deep link for hotel booking"""
        try:
            # Use the existing booking link if it's already a proper URL
            existing_link = hotel.get("booking_link", "")
            if existing_link and existing_link.startswith("https://www.booking.com/hotel/"):
                logger.info(f"Using existing booking link: {existing_link}")
                return existing_link
            
            # Extract hotel ID from the existing booking link
            hotel_id = hotel.get("hotel_id", "")
            if not hotel_id:
                # Try to extract from booking link
                booking_link = hotel.get("booking_link", "")
                if "hotel/" in booking_link:
                    hotel_id = booking_link.split("hotel/")[1].split(".")[0]
            
            if hotel_id:
                # Generate proper Booking.com deep link
                params = {
                    "checkin": checkin_date,
                    "checkout": checkout_date,
                    "adults": travelers,
                    "rooms": 1,
                    "currency": "USD"
                }
                
                param_string = "&".join([f"{k}={v}" for k, v in params.items()])
                return f"https://www.booking.com/hotel/{hotel_id}.html?{param_string}"
            else:
                logger.warning(f"No hotel ID found for hotel: {hotel.get('name', 'Unknown')}")
                return existing_link
            
        except Exception as e:
            logger.error(f"Error generating hotel deep link: {str(e)}")
            return hotel.get("booking_link", "")
    
    def _generate_flight_deep_link(self, origin: str, destination: str, date: str, travelers: int, flight: Dict[str, Any]) -> str:
        """Generate a proper deep link for flight booking"""
        try:
            # Use Expedia for most flights (most comprehensive)
            airline = flight.get("airline", "").lower()
            
            if any(airline_name in airline for airline_name in ["spirit", "frontier", "jetblue", "delta", "american", "united"]):
                # Use Expedia for US carriers
                params = {
                    "leg1": f"from:{origin},to:{destination},departure:{date}TANYT",
                    "passengers": f"adults:{travelers}",
                    "cabin": "economy"
                }
                param_string = "&".join([f"{k}={v}" for k, v in params.items()])
                return f"https://www.expedia.com/Flights-Search?{param_string}"
            else:
                # Use Skyscanner for international carriers
                return f"https://www.skyscanner.com/transport/flights/{origin}/{destination}/{date}/?adults={travelers}&children=0"
                
        except Exception as e:
            logger.error(f"Error generating flight deep link: {str(e)}")
            return f"https://www.expedia.com/Flights-Search?leg1=from:{origin},to:{destination},departure:{date}TANYT&passengers=adults:{travelers}" 